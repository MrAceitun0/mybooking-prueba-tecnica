<div class="container-fluid d-flex justify-content-center mt-4">
  <div class="row w-100 justify-content-center">
    <div class="col-12 col-lg-10 col-xl-8">
      <div class="text-center mb-4">
        <h1 class="mb-4">Listado de Tarifas</h1>
      </div>
      
      <div id="error-alert" class="alert alert-danger d-none" role="alert">
        <i class="bi bi-exclamation-triangle me-2"></i>
        <span id="error-message"></span>
      </div>

      <div class="row justify-content-center">
        <div class="col-12 col-lg-10 col-xl-8">
          <div class="card shadow-lg" id="pricing-filters-card">
            <div class="card-header">
              <h5 class="card-title mb-0" id="step-title">Selecciona una sucursal</h5>
              <div class="progress mt-2" style="height: 8px;">
                <div class="progress-bar" role="progressbar" id="progress-bar" style="width: 20%" aria-valuenow="1" aria-valuemin="0" aria-valuemax="5"></div>
              </div>
            </div>
            <div class="card-body" style="min-height: 120px;">
              <div id="completed-selections" class="mb-3 d-none">
                <div class="d-flex flex-wrap gap-2 mb-3" id="selections-badges"></div>
                <hr>
              </div>
              
              <div id="step-1" class="mb-3">
                <label for="rental-location" class="form-label">Sucursal</label>
                <select id="rental-location" class="form-select">
                  <option value="">Selecciona una sucursal</option>
                </select>
                <div id="rental-location-loading" class="spinner-border spinner-border-sm mt-2 d-none" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>

              <div id="step-2" class="mb-3 d-none">
                <label for="rate-type" class="form-label">Rate Type</label>
                <select id="rate-type" class="form-select">
                  <option value="">Selecciona un tipo de tarifa</option>
                </select>
                <div id="rate-type-loading" class="spinner-border spinner-border-sm mt-2 d-none" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>

              <div id="step-3" class="mb-3 d-none">
                <label for="season-definition" class="form-label">Season Definition</label>
                <select id="season-definition" class="form-select">
                  <option value="">Selecciona un grupo de temporadas</option>
                  <option value="none">Sin Temporadas</option>
                </select>
                <div id="season-definition-loading" class="spinner-border spinner-border-sm mt-2 d-none" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>

              <div id="step-4" class="mb-3 d-none">
                <label for="season" class="form-label">Season</label>
                <select id="season" class="form-select">
                  <option value="">Selecciona una temporada</option>
                </select>
                <div id="season-loading" class="spinner-border spinner-border-sm mt-2 d-none" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>

              <div id="step-5" class="mb-3 d-none">
                <label for="unit" class="form-label">Unit</label>
                <select id="unit" class="form-select">
                  <option value="">Selecciona una unidad</option>
                </select>
                <div id="unit-loading" class="spinner-border spinner-border-sm mt-2 d-none" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>
            </div>
            <div class="card-footer d-flex justify-content-between">
              <div>
                <button type="button" class="btn btn-outline-secondary" id="reset-btn">
                  <i class="bi bi-arrow-clockwise me-2"></i>Reiniciar
                </button>
              </div>
              <div class="d-flex gap-2">
                <button type="button" class="btn btn-outline-secondary" id="back-btn" disabled>
                  <i class="bi bi-arrow-left me-2"></i>Atrás
                </button>
                <button type="button" class="btn btn-primary" id="next-btn" disabled>Next</button>
                <button type="button" class="btn btn-success d-none" id="submit-btn" disabled>
                  <i class="bi bi-search me-2"></i>Buscar tarifas
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Results Section -->
      <div id="results-section" class="row mt-4 d-none">
        <div class="col-12">
          <div class="card">
            <div class="card-header">
              <h5 class="card-title mb-0">Vehículos Disponibles</h5>
            </div>
            <div class="card-body">
              <div id="loading-results" class="text-center d-none">
                <div class="spinner-border" role="status">
                  <span class="visually-hidden">Cargando...</span>
                </div>
                <p class="mt-2">Buscando vehículos...</p>
              </div>
              
              <div id="no-vehicles-message" class="alert alert-info d-none" role="alert">
                <i class="bi bi-info-circle me-2"></i>
                No se encontraron vehículos para las condiciones seleccionadas.
              </div>
              
                    <div id="vehicles-table-container" class="d-none">
                      <!-- Filtros aplicados -->
                      <div class="card mb-3">
                        <div class="card-header">
                          <h6 class="card-title mb-0">Filtros Aplicados</h6>
                        </div>
                        <div class="card-body">
                          <div class="row" id="applied-filters">
                            <!-- Los filtros se mostrarán aquí dinámicamente -->
                          </div>
                        </div>
                      </div>
                      
                      <div class="table-responsive">
                        <table id="prices_table" class="table table-hover">
                          <thead>
                            <tr>
                              <th scope="col">Categoría</th>
                              <th scope="col" class="text-right">1</th>
                              <th scope="col" class="text-right">2</th>
                              <th scope="col" class="text-right">4</th>
                              <th scope="col" class="text-right">8</th>
                              <th scope="col" class="text-right">15</th>
                              <th scope="col" class="text-right">30</th>
                            </tr>
                          </thead>
                          <tbody id="vehicles-table-body">
                          </tbody>
                        </table>
                      </div>
                    </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">

<script>
class PricingDashboard {
  constructor() {
    this.currentStep = 1;
    this.totalSteps = 5;
    this.data = {
      rentalLocations: [],
      rateTypes: [],
      seasonDefinitions: [],
      seasons: [],
      units: []
    };
    this.filters = {
      selectedRentalLocation: '',
      selectedRateType: '',
      selectedSeasonD: '',
      selectedSeasonDefinition: '',
      selectedUnit: ''
    };
    this.loadingStates = {
      isLoadingRentalLocations: true,
      isLoadingRateTypes: false,
      isLoadingSeasonDefinitions: false,
      isLoadingSeasons: false,
      isLoadingUnits: false
    };
    
    this.init();
  }

  async init() {
    this.setupEventListeners();
    await this.loadInitialData();
  }

  setupEventListeners() {
    document.getElementById('rental-location').addEventListener('change', (e) => {
      this.handleRentalLocationChange(e.target.value);
    });

    document.getElementById('rate-type').addEventListener('change', (e) => {
      this.handleRateTypeChange(e.target.value);
    });

    document.getElementById('season-definition').addEventListener('change', (e) => {
      this.handleSeasonDefinitionChange(e.target.value);
    });

    document.getElementById('season').addEventListener('change', (e) => {
      this.handleSeasonChange(e.target.value);
    });

    document.getElementById('unit').addEventListener('change', (e) => {
      this.handleUnitChange(e.target.value);
    });

    document.getElementById('next-btn').addEventListener('click', () => {
      this.handleNextStep();
    });

    document.getElementById('back-btn').addEventListener('click', () => {
      this.handlePreviousStep();
    });

    document.getElementById('reset-btn').addEventListener('click', () => {
      this.handleReset();
    });

    document.getElementById('submit-btn').addEventListener('click', () => {
      this.handleSubmit();
    });
  }

  async loadInitialData() {
    try {
      this.setLoading('rental-locations', true);
      const [rentalLocationsData, unitsData] = await Promise.all([
        this.fetchData('/api/rental-locations'),
        this.getUnits()
      ]);
      
      this.data.rentalLocations = rentalLocationsData;
      this.data.units = unitsData;
      
      this.populateSelect('rental-location', rentalLocationsData);
      this.hideError();
    } catch (err) {
      this.showError(err.message || 'Failed to load initial data');
    } finally {
      this.setLoading('rental-locations', false);
    }
  }

  async fetchData(url) {
    const response = await fetch(url);
    if (!response.ok) {
      if (response.status === 404) {
        return [];
      }
      throw new Error(`Failed to fetch data: ${response.statusText}`);
    }
    return response.json();
  }

  async getUnits() {
    return [
      { id: 1, name: 'Meses' },
      { id: 2, name: 'Días' },
      { id: 3, name: 'Horas' },
      { id: 4, name: 'Minutos' }
    ];
  }

  async handleRentalLocationChange(rentalLocationId) {
    this.filters.selectedRentalLocation = rentalLocationId;
    this.filters.selectedRateType = '';
    this.filters.selectedSeasonDefinition = '';
    this.filters.selectedSeason = '';
    this.filters.selectedUnit = '';
    
    this.data.rateTypes = [];
    this.data.seasonDefinitions = [];
    
    this.clearSelect('rate-type');
    this.clearSelect('season-definition');
    this.clearSelect('season');
    this.clearSelect('unit');
    
    if (!rentalLocationId) return;
    
    try {
      this.setLoading('rateTypes', true);
      const rateTypesData = await this.fetchData(`/api/rate-types?rental-location-id=${rentalLocationId}`);
      this.data.rateTypes = rateTypesData;
      this.populateSelect('rate-type', rateTypesData);
      this.hideError();
      
      if (this.currentStep === 1) {
        this.currentStep = 2;
        this.updateStep();
      }
    } catch (err) {
      this.showError(err.message || 'Failed to load rate types');
    } finally {
      this.setLoading('rateTypes', false);
    }
  }

  async handleRateTypeChange(rateTypeId) {
    this.filters.selectedRateType = rateTypeId;
    this.filters.selectedSeasonDefinition = '';
    this.filters.selectedSeason = '';
    this.filters.selectedUnit = '';
    
    this.data.seasonDefinitions = [];
    
    this.clearSelect('season-definition');
    this.clearSelect('season');
    this.clearSelect('unit');
    
    const submitBtn = document.getElementById('submit-btn');
    if (submitBtn) {
      submitBtn.disabled = true;
    }
    
    if (!rateTypeId || !this.filters.selectedRentalLocation) return;
    
    try {
      this.setLoading('seasonDefinitions', true);
      const seasonDefinitionsData = await this.fetchData(`/api/season-definitions?rental-location-id=${this.filters.selectedRentalLocation}&rate-type-id=${rateTypeId}`);
      this.data.seasonDefinitions = seasonDefinitionsData;
      this.populateSelect('season-definition', seasonDefinitionsData);
      this.hideError();
      
      if (this.currentStep === 2) {
        this.currentStep = 3;
        this.updateStep();
      }
    } catch (err) {
      this.showError(err.message || 'Failed to load season definitions');
    } finally {
      this.setLoading('seasonDefinitions', false);
    }
  }

  async handleSeasonDefinitionChange(seasonDefinitionId) {
    this.filters.selectedSeasonDefinition = seasonDefinitionId;
    this.filters.selectedSeason = '';
    this.filters.selectedUnit = '';
    
    this.data.seasons = [];
    this.clearSelect('season');
    
    const submitBtn = document.getElementById('submit-btn');
    if (submitBtn) {
      submitBtn.disabled = true;
    }
    
    if (!seasonDefinitionId || seasonDefinitionId === 'none') {
      if (this.currentStep === 3) {
        this.currentStep = 5;
        this.updateStep();
        if (this.data.units && this.data.units.length > 0) {
          this.populateSelect('unit', this.data.units);
        } else {
          this.getUnits().then(units => {
            this.data.units = units;
            this.populateSelect('unit', units);
          });
        }
      }
      return;
    }
    
    try {
      this.setLoading('seasons', true);
      const seasonsData = await this.fetchData(`/api/seasons?season-definition-id=${seasonDefinitionId}`);
      this.data.seasons = seasonsData;
      this.populateSelect('season', seasonsData);
      this.hideError();
      
      if (this.currentStep === 3) {
        this.currentStep = 4;
        this.updateStep();
      }
    } catch (err) {
      this.showError(err.message || 'Failed to load seasons');
    } finally {
      this.setLoading('seasons', false);
    }
  }

  handleSeasonChange(seasonId) {
    this.filters.selectedSeason = seasonId;
    this.filters.selectedUnit = '';
    
    const submitBtn = document.getElementById('submit-btn');
    if (submitBtn) {
      submitBtn.disabled = true;
    }
    
      if (this.currentStep === 4) {
        this.currentStep = 5;
        this.updateStep();
        if (this.data.units && this.data.units.length > 0) {
          this.populateSelect('unit', this.data.units);
        } else {
          this.getUnits().then(units => {
            this.data.units = units;
            this.populateSelect('unit', units);
          });
        }
      }
  }

  handleUnitChange(unitId) {
    this.filters.selectedUnit = unitId;
    
    if (unitId) {
      const submitBtn = document.getElementById('submit-btn');
      if (submitBtn) {
        submitBtn.disabled = false;
      }
    }
  }

  handleNextStep() {
    if (this.currentStep < this.totalSteps) {
      this.currentStep++;
      this.updateStep();
    }
  }

  handlePreviousStep() {
    if (this.currentStep > 1) {
      this.currentStep--;
      this.updateStep();
    }
  }

  handleReset() {
    this.currentStep = 1;
    this.filters = {
      selectedRentalLocation: '',
      selectedRateType: '',
      selectedSeason: '',
      selectedSeasonDefinition: '',
      selectedUnit: ''
    };
    this.data.rateTypes = [];
    this.data.seasonDefinitions = [];
    this.updateStep();
    this.clearAllSelects();
    this.hideError();
    this.init();
  }

  async handleSubmit() {
    console.log('Pricing search submitted with filters:', this.filters);
    
    this.showResultsSection();
    this.showLoading();
    this.hideNoVehiclesMessage();
    this.hideVehiclesTable();
    
    try {
      const params = new URLSearchParams({
        'rental-location-id': this.filters.selectedRentalLocation,
        'rate-type-id': this.filters.selectedRateType,
        'unit-id': this.filters.selectedUnit
      });
      
      if (this.filters.selectedSeasonDefinition && this.filters.selectedSeasonDefinition !== 'none') {
        params.append('season-definition-id', this.filters.selectedSeasonDefinition);
      }
      
      if (this.filters.selectedSeason) {
        params.append('season-id', this.filters.selectedSeason);
      }
      
      const response = await fetch(`/api/vehicles?${params.toString()}`);
      
      if (response.ok) {
        const vehicles = await response.json();
        this.displayVehicles(vehicles);
      } else if (response.status === 404) {
        this.showNoVehiclesMessage();
      } else {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }
    } catch (err) {
      console.error('Error fetching vehicles:', err);
      this.showError(err.message || 'Error al buscar vehículos');
    } finally {
      this.hideLoading();
    }
  }

  updateStep() {
    const stepTitles = [
      'Selecciona una sucursal',
      'Selecciona un tipo de tarifa', 
      'Selecciona un grupo de temporadas',
      'Selecciona una temporada',
      'Selecciona una unidad'
    ];
    document.getElementById('step-title').textContent = stepTitles[this.currentStep - 1];
    
    const progress = (this.currentStep / this.totalSteps) * 100;
    const progressBar = document.getElementById('progress-bar');
    progressBar.style.width = `${progress}%`;
    progressBar.setAttribute('aria-valuenow', this.currentStep);
    
    for (let i = 1; i <= this.totalSteps; i++) {
      const stepElement = document.getElementById(`step-${i}`);
        if (i === this.currentStep) {
          stepElement.classList.remove('d-none');
        } else {
          stepElement.classList.add('d-none');
        }
    }
    
    const backBtn = document.getElementById('back-btn');
    const nextBtn = document.getElementById('next-btn');
    const submitBtn = document.getElementById('submit-btn');
    
    backBtn.disabled = this.currentStep === 1;
    
    if (this.currentStep < this.totalSteps) {
      nextBtn.classList.remove('d-none');
      submitBtn.classList.add('d-none');
      nextBtn.disabled = this.isNextDisabled();
    } else {
      nextBtn.classList.add('d-none');
      submitBtn.classList.remove('d-none');
      submitBtn.disabled = this.isNextDisabled();
    }
    
    this.updateCompletedSelections();
  }

  isNextDisabled() {
    switch (this.currentStep) {
      case 1: return !this.filters.selectedRentalLocation;
      case 2: return !this.filters.selectedRateType;
      case 3: return !this.filters.selectedSeasonDefinition;
      case 4: return this.filters.selectedSeasonDefinition !== 'none' && !this.filters.selectedSeason;
      case 5: return !this.filters.selectedUnit;
      default: return true;
    }
  }

  updateCompletedSelections() {
    const selections = [
      { label: 'Rental Location', value: this.getSelectedName('rentalLocations', this.filters.selectedRentalLocation), step: 1 },
      { label: 'Rate Type', value: this.getSelectedName('rateTypes', this.filters.selectedRateType), step: 2 },
      { label: 'Season Definition', value: this.getSelectedName('seasonDefinitions', this.filters.selectedSeasonDefinition) || (this.filters.selectedSeasonDefinition === 'none' ? 'Sin Temporadas' : undefined), step: 3 },
      { label: 'Season', value: this.getSelectedName('seasons', this.filters.selectedSeason), step: 4 },
      { label: 'Unit', value: this.getSelectedName('units', this.filters.selectedUnit), step: 5 },
    ];
    
    const completedSelections = selections.filter(s => s.step < this.currentStep && s.value);
    const container = document.getElementById('completed-selections');
    const badgesContainer = document.getElementById('selections-badges');
    
    if (completedSelections.length > 0) {
      container.classList.remove('d-none');
      badgesContainer.innerHTML = completedSelections.map(selection => 
        `<span class="badge bg-secondary"><strong>${selection.label}:</strong> ${selection.value}</span>`
      ).join('');
    } else {
      container.classList.add('d-none');
    }
  }

  getSelectedName(dataType, selectedId) {
    if (!selectedId) return null;
    const item = this.data[dataType].find(item => item.id.toString() === selectedId);
    return item ? item.name : null;
  }

  populateSelect(selectId, data) {
    const select = document.getElementById(selectId);
    const currentValue = select.value;
    select.innerHTML = `<option value="">Select a ${selectId.replace('-', ' ')}</option>`;
    
    if (selectId === 'season-definition') {
      select.innerHTML += '<option value="none">Sin Temporadas</option>';
    }
    
    data.forEach(item => {
      const option = document.createElement('option');
      option.value = item.id.toString();
      option.textContent = item.name;
      select.appendChild(option);
    });
    
    if (currentValue) {
      select.value = currentValue;
    }
  }

  clearSelect(selectId) {
    const select = document.getElementById(selectId);
    select.innerHTML = `<option value="">Select a ${selectId.replace('-', ' ')}</option>`;
    if (selectId === 'season-definition') {
      select.innerHTML += '<option value="none">Sin Temporadas</option>';
    }
    select.value = '';
  }

  clearAllSelects() {
    ['rental-location', 'rate-type', 'season-definition', 'season', 'unit'].forEach(selectId => {
      this.clearSelect(selectId);
    });
  }

  setLoading(dataType, isLoading) {
    const loadingElement = document.getElementById(`${dataType.replace(/([A-Z])/g, '-$1').toLowerCase()}-loading`);
    if (loadingElement) {
      if (isLoading) {
        loadingElement.classList.remove('d-none');
      } else {
        loadingElement.classList.add('d-none');
      }
    }
  }

  showError(message) {
    const errorAlert = document.getElementById('error-alert');
    const errorMessage = document.getElementById('error-message');
    errorMessage.textContent = message;
    errorAlert.classList.remove('d-none');
  }

  hideError() {
    const errorAlert = document.getElementById('error-alert');
    errorAlert.classList.add('d-none');
  }

  showResultsSection() {
    const resultsSection = document.getElementById('results-section');
    resultsSection.classList.remove('d-none');
  }

  hideResultsSection() {
    const resultsSection = document.getElementById('results-section');
    resultsSection.classList.add('d-none');
  }

  showLoading() {
    const loading = document.getElementById('loading-results');
    loading.classList.remove('d-none');
  }

  hideLoading() {
    const loading = document.getElementById('loading-results');
    loading.classList.add('d-none');
  }

  showNoVehiclesMessage() {
    const noVehicles = document.getElementById('no-vehicles-message');
    noVehicles.classList.remove('d-none');
  }

  hideNoVehiclesMessage() {
    const noVehicles = document.getElementById('no-vehicles-message');
    noVehicles.classList.add('d-none');
  }

  showVehiclesTable() {
    const tableContainer = document.getElementById('vehicles-table-container');
    tableContainer.classList.remove('d-none');
  }

  hideVehiclesTable() {
    const tableContainer = document.getElementById('vehicles-table-container');
    tableContainer.classList.add('d-none');
  }

  displayVehicles(vehicles) {
    const tableBody = document.getElementById('vehicles-table-body');
    tableBody.innerHTML = '';

    if (vehicles.length === 0) {
      this.showNoVehiclesMessage();
      return;
    }

    this.displayAppliedFilters();

    const amounts = [1, 2, 4, 8, 15, 30];

    vehicles.forEach(vehicle => {
      const row = document.createElement('tr');
      
      const categoryCell = document.createElement('th');
      categoryCell.scope = 'row';
      categoryCell.textContent = vehicle.name;
      row.appendChild(categoryCell);

      amounts.forEach(amount => {
        const cell = document.createElement('td');
        cell.className = 'text-right';
        
        const priceForAmount = vehicle.prices.find(price => price.amount === amount);
        
        if (priceForAmount) {
          cell.textContent = `${parseFloat(priceForAmount.price).toFixed(2)}€`;
        } else {
          cell.textContent = '-';
        }
        
        row.appendChild(cell);
      });

      tableBody.appendChild(row);
    });

    this.showVehiclesTable();
  }

  displayAppliedFilters() {
    const appliedFiltersContainer = document.getElementById('applied-filters');
    appliedFiltersContainer.innerHTML = '';

    if (this.filters.selectedRentalLocation) {
      const rentalLocation = this.data.rentalLocations.find(rl => rl.id == this.filters.selectedRentalLocation);
      if (rentalLocation) {
        const filterDiv = this.createFilterBadge('Sucursal', rentalLocation.name, 'primary');
        appliedFiltersContainer.appendChild(filterDiv);
      }
    }

    if (this.filters.selectedRateType) {
      const rateType = this.data.rateTypes.find(rt => rt.id == this.filters.selectedRateType);
      if (rateType) {
        const filterDiv = this.createFilterBadge('Tipo de Tarifa', rateType.name, 'success');
        appliedFiltersContainer.appendChild(filterDiv);
      }
    }

    if (this.filters.selectedSeasonDefinition && this.filters.selectedSeasonDefinition !== 'none') {
      const seasonDefinition = this.data.seasonDefinitions.find(sd => sd.id == this.filters.selectedSeasonDefinition);
      if (seasonDefinition) {
        const filterDiv = this.createFilterBadge('Grupo de Temporadas', seasonDefinition.name, 'warning');
        appliedFiltersContainer.appendChild(filterDiv);
      }
    } else if (this.filters.selectedSeasonDefinition === 'none') {
      const filterDiv = this.createFilterBadge('Grupo de Temporadas', 'Sin Temporadas', 'secondary');
      appliedFiltersContainer.appendChild(filterDiv);
    }

    if (this.filters.selectedSeason) {
      const season = this.data.seasons.find(s => s.id == this.filters.selectedSeason);
      if (season) {
        const filterDiv = this.createFilterBadge('Temporada', season.name, 'info');
        appliedFiltersContainer.appendChild(filterDiv);
      }
    }

    if (this.filters.selectedUnit) {
      const unit = this.data.units.find(u => u.id == this.filters.selectedUnit);
      if (unit) {
        const filterDiv = this.createFilterBadge('Unidad', unit.name, 'dark');
        appliedFiltersContainer.appendChild(filterDiv);
      }
    }
  }

  createFilterBadge(label, value, colorClass) {
    const col = document.createElement('div');
    col.className = 'col-md-6 col-lg-4 mb-2';
    
    col.innerHTML = `
      <div class="d-flex align-items-center">
        <span class="badge bg-${colorClass} me-2">${label}</span>
        <span class="text-muted">${value}</span>
      </div>
    `;
    
    return col;
  }
}

document.addEventListener('DOMContentLoaded', () => {
  new PricingDashboard();
});
</script>
