'use client';

import { useState } from 'react';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Loader2, Search, ArrowLeft, RotateCw } from 'lucide-react';
import { Progress } from '@/components/ui/progress';
import type { Branch, RateType, SeasonSet, Season, Unit } from '@/lib/types';
import { Badge } from './ui/badge';
import { Separator } from './ui/separator';

interface FleetFiltersProps {
  branches: Branch[];
  rateTypes: RateType[];
  seasonSets: SeasonSet[];
  seasons: Season[];
  units: Unit[];
  selectedBranch: string;
  selectedRateType: string;
  selectedSeasonSet: string;
  selectedSeason: string;
  selectedUnit: string;
  isLoadingBranches: boolean;
  isLoadingRateTypes: boolean;
  isLoadingSeasonSets: boolean;
  isLoadingSeasons: boolean;
  isLoadingUnits: boolean;
  onBranchChange: (value: string) => void;
  onRateTypeChange: (value: string) => void;
  onSeasonSetChange: (value: string) => void;
  onSeasonChange: (value: string) => void;
  onUnitChange: (value: string) => void;
  onSubmit: () => void;
  onReset: () => void;
}

const FleetFilters: React.FC<FleetFiltersProps> = ({
  branches,
  rateTypes,
  seasonSets,
  seasons,
  units,
  selectedBranch,
  selectedRateType,
  selectedSeasonSet,
  selectedSeason,
  selectedUnit,
  isLoadingBranches,
  isLoadingRateTypes,
  isLoadingSeasonSets,
  isLoadingSeasons,
  isLoadingUnits,
  onBranchChange,
  onRateTypeChange,
  onSeasonSetChange,
  onSeasonChange,
  onUnitChange,
  onSubmit,
  onReset,
}) => {
  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = 5;

  const handleNextStep = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePreviousStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleReset = () => {
    setCurrentStep(1);
    onReset();
  };

  const handleSelectChange = (setter: (value: string) => void) => (value: string) => {
    setter(value);
    handleNextStep();
  };
  
  const getStepTitle = () => {
    switch (currentStep) {
      case 1: return 'Selecciona una sucursal afro';
      case 2: return 'Selecciona un tipo de tarifa';
      case 3: return 'Selecciona un grupo de temporadas';
      case 4: return 'Selecciona una temporada';
      case 5: return 'Selecciona un afr';
      default: return 'Encuentra tu vehÃ­culo';
    }
  }

  const isNextDisabled = () => {
    switch (currentStep) {
      case 1: return !selectedBranch;
      case 2: return !selectedRateType;
      case 3: return !selectedSeasonSet;
      case 4: return selectedSeasonSet !== 'none' && !selectedSeason;
      case 5: return !selectedUnit;
      default: return true;
    }
  };

  const selectedBranchName = branches.find(b => b.id === selectedBranch)?.name;
  const selectedRateTypeName = rateTypes.find(rt => rt.id === selectedRateType)?.name;
  const selectedSeasonSetName = seasonSets.find(ss => ss.id === selectedSeasonSet)?.name ?? (selectedSeasonSet === 'none' ? 'No Season' : undefined);
  const selectedSeasonName = seasons.find(s => s.id === selectedSeason)?.name;
  const selectedUnitName = units.find(u => u.id === selectedUnit)?.name;

  const selections = [
    { label: 'Branch', value: selectedBranchName, step: 1 },
    { label: 'Rate Type', value: selectedRateTypeName, step: 2 },
    { label: 'Season Set', value: selectedSeasonSetName, step: 3 },
    { label: 'Season', value: selectedSeasonName, step: 4 },
    { label: 'Unit', value: selectedUnitName, step: 5 },
  ];
  
  const completedSelections = selections.filter(s => s.step < currentStep && s.value);

  return (
    <Card className="shadow-lg">
      <CardHeader>
        <CardTitle>{getStepTitle()}</CardTitle>
        <Progress value={(currentStep / totalSteps) * 100} className="w-full mt-2" />
      </CardHeader>
      <CardContent className="min-h-[120px] space-y-4">
        {completedSelections.length > 0 && (
          <div className="space-y-3">
            <div className='flex flex-wrap gap-2'>
              {completedSelections.map((selection) => (
                <div key={selection.step} className="flex items-center gap-2">
                  <Badge variant="secondary" className='text-sm'>
                    <span className="font-semibold mr-1">{selection.label}:</span>
                    {selection.value}
                  </Badge>
                </div>
              ))}
            </div>
            <Separator />
          </div>
        )}

        {currentStep === 1 && (
          <div className="space-y-2">
            <Label htmlFor="branch">Branch</Label>
            <Select onValueChange={handleSelectChange(onBranchChange)} value={selectedBranch} disabled={isLoadingBranches}>
              <SelectTrigger id="branch">
                {isLoadingBranches ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <SelectValue placeholder="Select a branch">{selectedBranchName}</SelectValue>}
              </SelectTrigger>
              <SelectContent>
                {branches.map((branch) => <SelectItem key={branch.id} value={branch.id}>{branch.name}</SelectItem>)}
              </SelectContent>
            </Select>
          </div>
        )}

        {currentStep === 2 && (
          <div className="space-y-2">
            <Label htmlFor="rate-type">Rate Type</Label>
            <Select onValueChange={handleSelectChange(onRateTypeChange)} value={selectedRateType} disabled={isLoadingRateTypes}>
              <SelectTrigger id="rate-type">
                {isLoadingRateTypes ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <SelectValue placeholder="Select a rate type">{selectedRateTypeName}</SelectValue>}
              </SelectTrigger>
              <SelectContent>
                {rateTypes.map((rateType) => <SelectItem key={rateType.id} value={rateType.id}>{rateType.name}</SelectItem>)}
              </SelectContent>
            </Select>
          </div>
        )}

        {currentStep === 3 && (
          <div className="space-y-2">
            <Label htmlFor="season-set">Season Set</Label>
            <Select onValueChange={handleSelectChange(onSeasonSetChange)} value={selectedSeasonSet} disabled={isLoadingSeasonSets}>
              <SelectTrigger id="season-set">
                {isLoadingSeasonSets ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <SelectValue placeholder="Select a season set">{selectedSeasonSetName}</SelectValue>}
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">No Season</SelectItem>
                {seasonSets.map((set) => <SelectItem key={set.id} value={set.id}>{set.name}</SelectItem>)}
              </SelectContent>
            </Select>
          </div>
        )}

        {currentStep === 4 && (
          <div className="space-y-2">
            <Label htmlFor="season">Season</Label>
            <Select onValueChange={handleSelectChange(onSeasonChange)} value={selectedSeason} disabled={isLoadingSeasons || selectedSeasonSet === 'none'}>
              <SelectTrigger id="season">
                {isLoadingSeasons ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <SelectValue placeholder="Select a season">{selectedSeasonName}</SelectValue>}
              </SelectTrigger>
              <SelectContent>
                {seasons.map((season) => <SelectItem key={season.id} value={season.id}>{season.name}</SelectItem>)}
              </SelectContent>
            </Select>
          </div>
        )}
        
        {currentStep === 5 && (
            <div className="space-y-2">
            <Label htmlFor="unit">Unit</Label>
            <Select onValueChange={onUnitChange} value={selectedUnit} disabled={isLoadingUnits}>
                <SelectTrigger id="unit">
                {isLoadingUnits ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <SelectValue placeholder="Select a unit">{selectedUnitName}</SelectValue>}
                </SelectTrigger>
                <SelectContent>
                {units.map((unit) => <SelectItem key={unit.id} value={unit.id}>{unit.name}</SelectItem>)}
                </SelectContent>
            </Select>
            </div>
        )}
      </CardContent>
      <CardFooter className="flex justify-between">
        <div>
            <Button variant="outline" onClick={handleReset}><RotateCw className="mr-2 h-4 w-4" /> Start Over</Button>
        </div>
        <div className="flex gap-2">
            <Button variant="ghost" onClick={handlePreviousStep} disabled={currentStep === 1}><ArrowLeft className="mr-2 h-4 w-4" /> Back</Button>
            {currentStep < totalSteps ? (
                <Button onClick={handleNextStep} disabled={isNextDisabled()}>Next</Button>
            ) : (
                <Button onClick={onSubmit} disabled={isNextDisabled()}><Search className="mr-2 h-4 w-4" /> Find Cars</Button>
            )}
        </div>
      </CardFooter>
    </Card>
  );
};

export default FleetFilters;
